//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eShopWinForms.eShopServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="eShopServiceReference.ICatalogService")]
    public interface ICatalogService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/FindCatalogItem", ReplyAction="http://tempuri.org/ICatalogService/FindCatalogItemResponse")]
        eShopServiceLibrary.CatalogItem FindCatalogItem(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/FindCatalogItem", ReplyAction="http://tempuri.org/ICatalogService/FindCatalogItemResponse")]
        System.Threading.Tasks.Task<eShopServiceLibrary.CatalogItem> FindCatalogItemAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetCatalogBrands", ReplyAction="http://tempuri.org/ICatalogService/GetCatalogBrandsResponse")]
        eShopServiceLibrary.CatalogBrand[] GetCatalogBrands();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetCatalogBrands", ReplyAction="http://tempuri.org/ICatalogService/GetCatalogBrandsResponse")]
        System.Threading.Tasks.Task<eShopServiceLibrary.CatalogBrand[]> GetCatalogBrandsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetCatalogItems", ReplyAction="http://tempuri.org/ICatalogService/GetCatalogItemsResponse")]
        eShopServiceLibrary.CatalogItem[] GetCatalogItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetCatalogItems", ReplyAction="http://tempuri.org/ICatalogService/GetCatalogItemsResponse")]
        System.Threading.Tasks.Task<eShopServiceLibrary.CatalogItem[]> GetCatalogItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetCatalogTypes", ReplyAction="http://tempuri.org/ICatalogService/GetCatalogTypesResponse")]
        eShopServiceLibrary.CatalogType[] GetCatalogTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetCatalogTypes", ReplyAction="http://tempuri.org/ICatalogService/GetCatalogTypesResponse")]
        System.Threading.Tasks.Task<eShopServiceLibrary.CatalogType[]> GetCatalogTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetAvailableStock", ReplyAction="http://tempuri.org/ICatalogService/GetAvailableStockResponse")]
        int GetAvailableStock(System.DateTime date, int catalogItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/GetAvailableStock", ReplyAction="http://tempuri.org/ICatalogService/GetAvailableStockResponse")]
        System.Threading.Tasks.Task<int> GetAvailableStockAsync(System.DateTime date, int catalogItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/CreateAvailableStock", ReplyAction="http://tempuri.org/ICatalogService/CreateAvailableStockResponse")]
        void CreateAvailableStock(eShopServiceLibrary.CatalogItemsStock catalogItemsStock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/CreateAvailableStock", ReplyAction="http://tempuri.org/ICatalogService/CreateAvailableStockResponse")]
        System.Threading.Tasks.Task CreateAvailableStockAsync(eShopServiceLibrary.CatalogItemsStock catalogItemsStock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/CreateCatalogItem", ReplyAction="http://tempuri.org/ICatalogService/CreateCatalogItemResponse")]
        void CreateCatalogItem(eShopServiceLibrary.CatalogItem catalogItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/CreateCatalogItem", ReplyAction="http://tempuri.org/ICatalogService/CreateCatalogItemResponse")]
        System.Threading.Tasks.Task CreateCatalogItemAsync(eShopServiceLibrary.CatalogItem catalogItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/UpdateCatalogItem", ReplyAction="http://tempuri.org/ICatalogService/UpdateCatalogItemResponse")]
        void UpdateCatalogItem(eShopServiceLibrary.CatalogItem catalogItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/UpdateCatalogItem", ReplyAction="http://tempuri.org/ICatalogService/UpdateCatalogItemResponse")]
        System.Threading.Tasks.Task UpdateCatalogItemAsync(eShopServiceLibrary.CatalogItem catalogItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/RemoveCatalogItem", ReplyAction="http://tempuri.org/ICatalogService/RemoveCatalogItemResponse")]
        void RemoveCatalogItem(eShopServiceLibrary.CatalogItem catalogItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICatalogService/RemoveCatalogItem", ReplyAction="http://tempuri.org/ICatalogService/RemoveCatalogItemResponse")]
        System.Threading.Tasks.Task RemoveCatalogItemAsync(eShopServiceLibrary.CatalogItem catalogItem);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICatalogServiceChannel : eShopWinForms.eShopServiceReference.ICatalogService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CatalogServiceClient : System.ServiceModel.ClientBase<eShopWinForms.eShopServiceReference.ICatalogService>, eShopWinForms.eShopServiceReference.ICatalogService {
        
        public CatalogServiceClient() {
        }
        
        public CatalogServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CatalogServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CatalogServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CatalogServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public eShopServiceLibrary.CatalogItem FindCatalogItem(int id) {
            return base.Channel.FindCatalogItem(id);
        }
        
        public System.Threading.Tasks.Task<eShopServiceLibrary.CatalogItem> FindCatalogItemAsync(int id) {
            return base.Channel.FindCatalogItemAsync(id);
        }
        
        public eShopServiceLibrary.CatalogBrand[] GetCatalogBrands() {
            return base.Channel.GetCatalogBrands();
        }
        
        public System.Threading.Tasks.Task<eShopServiceLibrary.CatalogBrand[]> GetCatalogBrandsAsync() {
            return base.Channel.GetCatalogBrandsAsync();
        }
        
        public eShopServiceLibrary.CatalogItem[] GetCatalogItems() {
            return base.Channel.GetCatalogItems();
        }
        
        public System.Threading.Tasks.Task<eShopServiceLibrary.CatalogItem[]> GetCatalogItemsAsync() {
            return base.Channel.GetCatalogItemsAsync();
        }
        
        public eShopServiceLibrary.CatalogType[] GetCatalogTypes() {
            return base.Channel.GetCatalogTypes();
        }
        
        public System.Threading.Tasks.Task<eShopServiceLibrary.CatalogType[]> GetCatalogTypesAsync() {
            return base.Channel.GetCatalogTypesAsync();
        }
        
        public int GetAvailableStock(System.DateTime date, int catalogItemId) {
            return base.Channel.GetAvailableStock(date, catalogItemId);
        }
        
        public System.Threading.Tasks.Task<int> GetAvailableStockAsync(System.DateTime date, int catalogItemId) {
            return base.Channel.GetAvailableStockAsync(date, catalogItemId);
        }
        
        public void CreateAvailableStock(eShopServiceLibrary.CatalogItemsStock catalogItemsStock) {
            base.Channel.CreateAvailableStock(catalogItemsStock);
        }
        
        public System.Threading.Tasks.Task CreateAvailableStockAsync(eShopServiceLibrary.CatalogItemsStock catalogItemsStock) {
            return base.Channel.CreateAvailableStockAsync(catalogItemsStock);
        }
        
        public void CreateCatalogItem(eShopServiceLibrary.CatalogItem catalogItem) {
            base.Channel.CreateCatalogItem(catalogItem);
        }
        
        public System.Threading.Tasks.Task CreateCatalogItemAsync(eShopServiceLibrary.CatalogItem catalogItem) {
            return base.Channel.CreateCatalogItemAsync(catalogItem);
        }
        
        public void UpdateCatalogItem(eShopServiceLibrary.CatalogItem catalogItem) {
            base.Channel.UpdateCatalogItem(catalogItem);
        }
        
        public System.Threading.Tasks.Task UpdateCatalogItemAsync(eShopServiceLibrary.CatalogItem catalogItem) {
            return base.Channel.UpdateCatalogItemAsync(catalogItem);
        }
        
        public void RemoveCatalogItem(eShopServiceLibrary.CatalogItem catalogItem) {
            base.Channel.RemoveCatalogItem(catalogItem);
        }
        
        public System.Threading.Tasks.Task RemoveCatalogItemAsync(eShopServiceLibrary.CatalogItem catalogItem) {
            return base.Channel.RemoveCatalogItemAsync(catalogItem);
        }
    }
}
